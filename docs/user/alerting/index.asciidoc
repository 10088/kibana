[role="xpack"]
[[alerting-getting-started]]
= Alerting and Actions

beta[]

--

Alerting allows you to detect complex conditions within different {kib} apps and trigger actions when those conditions are met. Alerting is integrated with <<xpack-apm,*APM*>>, <<xpack-infra,*Metrics*>>, <<xpack-siem,*SIEM*>>, <<xpack-uptime,*Uptime*>>, and can be centrally managed from the <<management,*Management*>> UI. {kib} provides an API to control both alerts and actions, and comes with a set of <<action-types, prebuilt actions>> for you to use.

[role="screenshot"]
image::images/alerting-overview.png[Alerts and actions UI]

[IMPORTANT]
==============================================
To make sure you can access alerting and actions, see the <<alerting-setup-prerequisites, setup and pre-requisites>> section.
==============================================

[float]
== Concepts and terminology

Describe
* Terminology
* Spaces
* Relationship between connectors, alerts, and actions

the alert definition:  what conditions you want to detect, and how frequently to check 
the action:  what happens when  those conditions occur 


[float]
== Differences from Watcher

How is alerting different from watcher alerts?


Alerting cuts across all our products and use cases. If you have live data, there’s a case for alerting. This is why we built Watcher and why it’s been successful. Yet when we look across use cases it’s clear there’s no one-size-fits-all alerting.

From products like Elastic Logs, SIEM, APM, Uptime, Infrastructure, and Maps, to features like monitoring and machine learning to a multitude of Kibana dashboards, alerts and notifications play a critical role, yet each has unique needs for detecting conditions, expressing them, and showing them in context. Effective alerting and monitoring requires deep integration with a product. As the stack and its uses have evolved, it’s become clear that Elasticsearch alerting needs a complement that allows for tightly integrated, rich expression of alerts within each use case.

[float]
[[alerting-setup-prerequisites]]
== Setup and prerequisites

{reporting} is automatically enabled in {kib}. The first time {kib} runs, it extracts a custom build for the Chromium web browser, which
runs on the server in headless mode to load {kib} and capture the rendered {kib} charts as images.

Chromium is an open-source project not related to Elastic, but the Chromium binary for {kib} has been custom-built by Elastic to ensure it
works with minimal setup. However, the {kib} server OS might still require additional dependencies for Chromium. See the
<<reporting-troubleshooting-system-dependencies, Reporting troubleshooting>> section for more information about the system dependencies
for different operating systems.


--

include::defining-alerts.asciidoc[]
include::alert-examples.asciidoc[]
include::action-types.asciidoc[]
include::alert-types.asciidoc[]
include::alerting-scale-performance.asciidoc[]
